// Copyright (c) 2025 Zack Puhl <github@xmit.xyz>. All rights reserved.
// Use of this source code is governed by the MIT license
// a copy of which can be found in the LICENSE_STDLIB file.
module keccak::sha3_tests @test;

import keccak::tests_common;
import std::hash::sha3::sha3;


// See: https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/sha-3bytetestvectors.zip
//
// We of course won't do extended validation here, just sample a few of the many.
fn void sha3_known_vectors()
{
	test::eq(x"1bb36bebde5f3cb6d8e4672acf6eec8728f31a54dacc2560da2a00cc", sha3::hash_224(x"bf5831"));
	test::eq(x"0b521dac1efe292e20dfb585c8bff481899df72d59983315958391ba", sha3::hash_224(x"d148ce6d"));
	test::eq(x"31802a0fa9ae7ae88626604ad9ae41381d6f7c3c90effcfcf70efcf7", sha3::hash_224(x"5c5b8c1902c8608c204e72a813e2b625021b3182c48b00f7fe4f"));
	test::eq(x"3bc9b7973f55735b612ddee8cc7907a3f1429b06df7cb1293b989802", sha3::hash_224(x"e89e5cf07afb4a58ebeee17ff596d90b3274ba348f14f284fff025"));
	test::eq(x"205d89e032f03c8519cf43b720478389b1788f3522c3d347febd2c70", sha3::hash_224(x"1119b962bed5815734af7827ec536701a494ac5d4ab83eea1b16ecc80ce4e5f8694a7d11bcba2e34f084dd"));
	test::eq(x"d483e39b7add050eb4a793e54c85b250746e382399c74736f33da890", sha3::hash_224(x"d2c45e2c1fa0c44efc84e6c0654cc0d867a3e33733c725aa718d974ed6a4b7f8f91de7d3622b1e4be428de2a"));
	test::eq(x"9337537de482f0cf88cad6b86e195a1e422e59cc60d41d0eca8b0091", sha3::hash_224(x"8b5d77a906c7ec7563af7551a796e5d5dcf02c42121d7b13a49aa9d4bc79d637190e4e6510ecaf92d1104fd4ec5bd8351446350722d1b2775dbc5e65f8fab473dc637b5ca8a9eb88f68d11dde15275d7c472f9db43"));
	test::eq(x"88eab3e16ca8da5716542bae3c7c736b541c896199b2cb941213767b", sha3::hash_224(x"3a564a84c2b48ee26da138ce2d1ae3c7933bcd65e40288406e56f30d1c48690a4998389dd27b55376f9b4e7f43607fadb16e8933726f00a3e41264cda553532761fefc73e86ed79b849b94e0895451332dc80fe39a4b"));

	test::eq(x"3a42b68ab079f28c4ca3c752296f279006c4fe78b1eb79d989777f051e4046ae", sha3::hash_256(x"e7372105"));
	test::eq(x"53a018937221081d09ed0497377e32a1fa724025dfdc1871fa503d545df4b40d", sha3::hash_256(x"0296f2c40a"));
	test::eq(x"b87d9e4722edd3918729ded9a6d03af8256998ee088a1ae662ef4bcaff142a96", sha3::hash_256(x"d83c721ee51b060c5a41438a8221e040"));
	test::eq(x"6c2de3c95900a1bcec6bd4ca780056af4acf3aa36ee640474b6e870187f59361", sha3::hash_256(x"266e8cbd3e73d80df2a49cfdaf0dc39cd1"));
	test::eq(x"90fc3193552ec71d3315ebbb807913afd4cd2f0833a65e40d011d64de5e66513", sha3::hash_256(x"5a72e0e1aec82a6541f04883bb463b0c39c22b59431cfb8bfd332117a1afb5832ce5c76a58fcf6c6cb4e3e6f8e1112de"));
	test::eq(x"5c4b6ceac9441defa99b10b805a725d4018b74b3e1f24ad8934fc89b41b8fd9e", sha3::hash_256(x"43402165911890719f9179f883bbbc2a3be77682e60dd24b356a22621c6d2e3dcdd4cb2ce613b0dfe9f58629ee853e0394"));
	test::eq(x"6d5260384f3cefd3758fb900dcba3730d2b23cee03d197abeff01369dc73c180", sha3::hash_256(x"e543edcff8c094c0b329c8190b31c03fa86f06ace957918728692d783fa824ba4a4e1772afbe2d3f5cba701250d673405d2c38d52c52522c818947bcc0373835b198c4cc80b029d20884ac8c50893c3f565d528a0cb51bf8a197d9d6"));
	test::eq(x"d88e5f3b2d0a698fd943233760a3000a3360d9040e7374b22e39ea58d868102d", sha3::hash_256(x"4e10ab631718aa5f6e69ee2c7e17908ec82cb81667e508f6981f3814790cfd5d112a305c91762c0bd9dd78e93ef3a64c8be77af945b74ff234a0b78f1ed962d0d68041f276d5ea40e8a63f2cab0a4a9ed3526c8c523db7cb776b9825b4"));

	test::eq(x"ea12d6d32d69ad2154a57e0e1be481a45add739ee7dd6e2a27e544b6c8b5ad122654bbf95134d567987156295d5e57db", sha3::hash_384(x"6ab7d6"));
	test::eq(x"cb6e6ce4a266d438ddd52867f2e183021be50223c7d57f8fdcaa18093a9d0126607df026c025bff40bc314af43fd8a08", sha3::hash_384(x"11587dcb"));
	test::eq(x"dd734f4987fe1a71455cf9fb1ee8986882c82448827a7880fc90d2043c33b5cbc0ed58b8529e4c6bc3a7288829e0a40d", sha3::hash_384(x"65b27f6c5578a4d5d9f6519c554c3097"));
	test::eq(x"dba6f929fe55f9d66c5f67c0af3b82f17bcf58b36752f3165c16083fea8fd478ee6903f27f820ad2dd9950afb48c6700", sha3::hash_384(x"a74847930a03abeea473e1f3dc30b88815"));
	test::eq(x"a44c7f84ab962f68283404f8c5c4029dbc35d2138e075c9327580baf89f292937bf99422e45756b3f942bf0a5ae4acb6", sha3::hash_384(x"26bad23e51c4560c172076538b28716782ee6304962f68e27182048948d5c367a51a1c206a3e9b25135b40883b2e220f61cb5787ed8f"));
	test::eq(x"29c8bb39bb2aad419a00a80216ec71ec5ec9ab54c41927e3e3f2f48f079a5886d7fe89db98c807ab686d2339001d6252", sha3::hash_384(x"77a9f652a003a83d22fb849b73fed7d37830c0dc53f89cea7dbec24e14f37197765206fe0e6672016e4dec4d9ebbe3e1b4423771a5d0a8"));
	test::eq(x"5fa4ebfa24150236c03409f0857b31cb95b0150f381c8858b01559957b1268f73c698709233e6b15468675a102d0c5e5", sha3::hash_384(x"3df27829bfb1ab7d381f146b30370ef56b392b73b35b1be5d8bbcf88f499dda7f3c327b45350b8972991ee466545de96560cf451711fda884e3d9b2af3e909d655d25cee1c931beda79c40fa507097bdf1126771a7b9543ad5cb84b9"));
	test::eq(x"eaa756b5892fdfc793d74e3f9f4d6c7a5a6a2241dd11e0c38ced59c8ec7be377a41d1d06774a5970ce9722d8e119d0ad", sha3::hash_384(x"b00f4e67ca08ccfa32b2698f70411d8f570f69c896e18ec8896cfe89551810543303f7df0c49f5b94783cce7df8d76d0b88d155633302d46003711f233339b1c9a8c20164ec8a328890a4932b7d90d92d023b548e4820558f8bd327010"));

	test::eq(x"4aa96b1547e6402c0eee781acaa660797efe26ec00b4f2e0aec4a6d10688dd64cbd7f12b3b6c7f802e2096c041208b9289aec380d1a748fdfcd4128553d781e3", sha3::hash_512(x"37d518"));
	test::eq(x"58a5422d6b15eb1f223ebe4f4a5281bc6824d1599d979f4c6fe45695ca89014260b859a2d46ebf75f51ff204927932c79270dd7aef975657bb48fe09d8ea008e", sha3::hash_512(x"fc7b8cda"));
	test::eq(x"783964a1cf41d6d210a8d7c81ce6970aa62c9053cb89e15f88053957ecf607f42af08804e76f2fbdbb31809c9eefc60e233d6624367a3b9c30f8ee5f65be56ac", sha3::hash_512(x"133b497b00932773a53ba9bf8e61d59f05f4"));
	test::eq(x"6bf7fc8e9014f35c4bde6a2c7ce1965d9c1793f25c141021cc1c697d111363b3854953c2b4009df41878b5558e78a9a9092c22b8baa0ed6baca005455c6cca70", sha3::hash_512(x"88c050ea6b66b01256bda299f399398e1e3162"));
	test::eq(x"8d651605c6b32bf022ea06ce6306b2ca6b5ba2781af87ca2375860315c83ad88743030d148ed8d73194c461ec1e84c045fc914705747614c04c8865b51da94f7", sha3::hash_512(x"a60b7b3df15b3f1b19db15d480388b0f3b00837369aa2cc7c3d7315775d7309a2d6f6d1371d9c875350dec0a"));
	test::eq(x"4af918eb676ce278c730212ef79d818773a76a43c74d643f238e9b61acaf4030c617c4d6b3b7514c59b3e5e95d82e1e1e35443e851718b13b63e70b123d1b72c", sha3::hash_512(x"2745dd2f1b215ea509a912e5761cccc4f19fa93ba38445c528cb2f099de99ab9fac955baa211fd8539a671cdb6"));
	test::eq(x"2c74f846ecc722ea4a1eb1162e231b6903291fffa95dd5e1d17dbc2c2be7dfe549a80dd34487d714130ddc9924aed904ad55f49c91c80ceb05c0c034dae0a0a4", sha3::hash_512(x"fca5f68fd2d3a52187b349a8d2726b608fccea7db42e906b8718e85a0ec654fac70f5a839a8d3ff90cfed7aeb5ea9b08f487fc84e1d9f7fb831dea254468a65ba18cc5a126"));
	test::eq(x"9a10a7ce23c0497fe8783927f833232ae664f1e1b91302266b6ace25a9c253d1ecab1aaaa62f865469480b2145ed0e489ae3f3f9f7e6da27492c81b07e606fb6", sha3::hash_512(x"881ff70ca34a3e1a0e864fd2615ca2a0e63def254e688c37a20ef6297cb3ae4c76d746b5e3d6bb41bd0d05d7df3eeded74351f4eb0ac801abe6dc10ef9b635055ee1dfbf4144"));
}

fn void sha3_empty()
{
	test::eq(sha3::hash_224(""), x"6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
	test::eq(sha3::hash_256(""), x"a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
	test::eq(sha3::hash_384(""), x"0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
	test::eq(sha3::hash_512(""), x"a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
}

fn void sha3_simple()
{
	String[][] expected = {
		{
			x"602bdc204140db016bee5374895e5568ce422fabe17e064061d80097",
			x"a03ab19b866fc585b5cb1812a2f63ca861e7e7643ee5d43fd7106b623725fd67",
			x"9bd942d1678a25d029b114306f5e1dae49fe8abeeacd03cfab0f156aa2e363c988b1c12803d4a8c9ba38fdc873e5f007",
			x"48c8947f69c054a5caa934674ce8881d02bb18fb59d5a63eeaddff735b0e9801e87294783281ae49fc8287a0fd86779b27d7972d3e84f0fa0d826d7cb67dfefc",
		},
		{
			x"5cdeca81e123f87cad96b9cba999f16f6d41549608d4e0f4681b8239",
			x"7cab2dc765e21b241dbc1c255ce620b29f527c6d5e7f5f843e56288f0d707521",
			x"fed399d2217aaf4c717ad0c5102c15589e1c990cc2b9a5029056a7f7485888d6ab65db2370077a5cadb53fc9280d278f",
			x"af328d17fa28753a3c9f5cb72e376b90440b96f0289e5703b729324a975ab384eda565fc92aaded143669900d761861687acdc0a5ffa358bd0571aaad80aca68",
		},
		{
			x"beae76edd99d4ad4d398d51c5ea1d8b7b3fa6d49d687b0cb1ec2ec41",
			x"738eeb2d4adf0d452456695011bb252bd4701a0ae78fdd3fc945a963bceb1702",
			x"284da0df47fc9e75a4ef1248f69ca0d12a5d44508942e63b03b8c227510c2e1b43400009fcd36c0acc941679e5024a04",
			x"69958b041bc72e9922e02cd4250953ee69d5f6e69f97d8def72b34effc0aea2bf5cfe03bd4ada0e271060593395656c1bf9eb68d1fc4cf146f90601152222df7",
		},
		{
			x"d15dadceaa4d5d7bb3b48f446421d542e08ad8887305e28d58335795",
			x"69070dda01975c8c120c3aada1b282394e7f032fa9cf32f4cb2259a0897dfc04",
			x"7063465e08a93bce31cd89d2e3ca8f602498696e253592ed26f07bf7e703cf328581e1471a7ba7ab119b1a9ebdf8be41",
			x"01dedd5de4ef14642445ba5f5b97c15e47b9ad931326e4b0727cd94cefc44fff23f07bf543139939b49128caf436dc1bdee54fcb24023a08d9403f9b4bf0d450",
		},
		{
			x"154808e2119f5198d7063280d45e4d7a8579c0ef34f0239b7ea8a81d",
			x"f5250306ad541a75f1fe378b6fbe4c8cdd8c915bbd9d37f3eb5e9ba65bbe9fbf",
			x"ac3f14e1f333c89bf01fc72a21ec949d224c15768f47779419e70cec7c8531953f40a1e27c50f7f683072c6d1e208679",
			x"ff4c4824e28345ba460b358514dd161dc9992b33e9e419035991bf25cd7b66b67d1acc5f28238c3f0e5a2bfd28c1133e46dfcc565cbcb95a5876c9fcdc65df64",
		},
	};

	foreach (i, v : tests_common::SIMPLE_VECTORS)
	{
		test::eq(sha3::hash_224(v[..])[..], expected[i][0][..]);
		test::eq(sha3::hash_256(v[..])[..], expected[i][1][..]);
		test::eq(sha3::hash_384(v[..])[..], expected[i][2][..]);
		test::eq(sha3::hash_512(v[..])[..], expected[i][3][..]);
	}
}

fn void sha3_interval()
{
	char[257] x = { [0..256] = 'a' };

	String[][] expected = {
		{
			x"9e86ff69557ca95f405f081269685b38e3a819b309ee942f482b6a8b",
			x"80084bf2fba02475726feb2cab2d8215eab14bc6bdd8bfb2c8151257032ecd8b",
			x"1815f774f320491b48569efec794d249eeb59aae46d22bf77dafe25c5edc28d7ea44f93ee1234aa88f61c91912a4ccd9",
			x"697f2d856172cb8309d6b8b97dac4de344b549d4dee61edfb4962d8698b7fa803f4f93ff24393586e28b5b957ac3d1d369420ce53332712f997bd336d09ab02a",
		},
		{
			x"4c262c13b06ac37910fe5fa494adedb8f44108f0ef40e6b4fcf0daec",
			x"ac95a2d33713281e64db879a478235f492e80f584df4acd2466462bce4110154",
			x"875f1b952f57a5fef9a03c5e0a9ac710d9e71e00d6e7f4762be6c85125e29923e385528cfafe6e49837dfcf591060c50",
			x"a70ad2630a2b93ec88d10d55b48bc742cc9658e8a8b1a44db1274c09401f4912507bb4e1de7b83c60502e103b705c83b4ec4d2c9a3dca4805a6daef7e9ae4bde",
		},
		{
			x"8f963b36aa933ff36fb9a15b600fd48a3098499043c5c331b43df735",
			x"84ee1a04bcce09fb1f4507fbdfb81655d71a95e7b546f6859859ccf86d175ae8",
			x"23fd972f56f6cb5b46ef184d09b5a491551df164cdfe757d6529acdd12768f1602afa19b1b7c58742cb6fe359a631584",
			x"aa5030e1a90f23668566170f2c939849c8d16c36028bfe8c5d145733d2e18d75c4217e8f59287619f6a800a63f0dd86ea22e21742d7fbc22ed89e3ae5a1e74c6",
		},
		{
			x"77b320d9f55cde5b02f8f6c6b6ab7c74c3d828555386377a5806bb9b",
			x"836bfb64006f8ff5a0a5534ce06d057f1a5397b0fd10500decc97f99900e4c65",
			x"3b168729c72c3ea7356f15c2fe1d0d9a90f19efaba67c2d888a307bc266ce95218564477daed89ba398ec4eec5d3ee84",
			x"f4e6ee6ac1e7cee7ace0ac4f4370b19f305c6ac26ccaf58e050932e93ea918c36eb735493d006b79db4560b5a62039bde68d04a2613dad18d11db216b726fa4a",
		},
		{
			x"10dd422d71c42ee102a0c4bd398b5b85470341a0794702c954b022ba",
			x"6d115e8744deef792419e8bdb8567d74844e0fa5c2d5e474a19de87ac001449f",
			x"c9df41fa389101cde63447257835464d89fd3974e5813f3f58d30e0296e89486e2d4bfc2b4089cd3bb860a20263322b8",
			x"5008048b64c14975181175f157be4a780c3d443d2177edf323d57884bc7e3979b9b53bca1325e880df3da0d97c435693441cb5527fbe950f5585678dfbb37785",
		},
	};

	// 'a'-array of lengths [1, 65, 129, 193, 257]
	for (usz i = 1, usz j = 0; i <= 257; i += 64, ++j)
	{
		test::@check(sha3::hash_224(x[:i])[..] == expected[j][0], "224: Failed on length %d.", i);
		test::@check(sha3::hash_256(x[:i])[..] == expected[j][1], "256: Failed on length %d.", i);
		test::@check(sha3::hash_384(x[:i])[..] == expected[j][2], "384: Failed on length %d.", i);
		test::@check(sha3::hash_512(x[:i])[..] == expected[j][3], "512: Failed on length %d.", i);
	}
}

fn void sha3_streamed()
{
	String s = tests_common::STREAM_VECTOR;

	Sha3_224 s1; s1.init();
	Sha3_256 s2; s2.init();
	Sha3_384 s3; s3.init();
	Sha3_512 s4; s4.init();

	s1.update(s[:20]); s1.update(s[20:10]); s1.update(s[30:1]); s1.update(s[31..]); 
	s2.update(s[:20]); s2.update(s[20:10]); s2.update(s[30:1]); s2.update(s[31..]); 
	s3.update(s[:20]); s3.update(s[20:10]); s3.update(s[30:1]); s3.update(s[31..]); 
	s4.update(s[:20]); s4.update(s[20:10]); s4.update(s[30:1]); s4.update(s[31..]); 

	char[224/8] s1_hash; s1.final(s1_hash[..]);
	char[256/8] s2_hash; s2.final(s2_hash[..]);
	char[384/8] s3_hash; s3.final(s3_hash[..]);
	char[512/8] s4_hash; s4.final(s4_hash[..]);

	test::eq(s1_hash, x"79a4cf51cfa5bff236652238616166a334603e2839c58f51f6be45d0");
	test::eq(s2_hash, x"9c18f4c0b611ae8e61c61ee1c221aeb0826df14603100ed25b157a584a73c76d");
	test::eq(s3_hash, x"30a9e008d31e57658633ef85418081d0cd9b7f5b9bcad88ee4cb80e712184495fb944a2f9b6e42904e70b7085824b3f2");
	test::eq(s4_hash, x"f21389f669b658ddb19ef62c284aa67e4b079f25d16abc9355d2e62d1e1ffc8f2304390fd3ce0b0a0a6566db6db8d9e88897b4ffd25fa88de786bebdd88a3455");
}

fn void sha3_large() @if($feature(SLOW_TESTS)) => @pool()
{
	char[] bigboi = tests_common::get_bigboi();

	String[] expected = {
		x"12bdba4b4ba285a63278e2e30bf99b540416608373cfaccf2addba66",
		x"23197d7e36a82bd6a351aa20dec68ace9b0d5aeb996e3fc05d14f2b0886cab09",
		x"861e981df5e5717c13f2bd3352f5c3ec84c8d08b46bdb8c70cc816243bc0e50714f6a88ef6005d47d55c51ad057a7c54",
		x"ede8cabb6f1aefd391527520db18b7c67f427a4255cf703315d65a97e4d7c946c44d2fb5d1968cdcd18164e8e6f4b64b27401589e518af0c2c24234ff602072d",
	};

	test::eq(sha3::hash_224(bigboi[..])[..], expected[0]);
	test::eq(sha3::hash_256(bigboi[..])[..], expected[1]);
	test::eq(sha3::hash_384(bigboi[..])[..], expected[2]);
	test::eq(sha3::hash_512(bigboi[..])[..], expected[3]);
}
